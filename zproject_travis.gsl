#   Generate continuous integration test files
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("travis", "Travis CI scripts")

.macro target_travis
.if !file.exists (".travis.yml")
.   echo "Generating skeleton .travis.yml script"
.   output ".travis.yml"
# Travis CI script
# This is a skeleton created by zproject.
# You can add hand-written code here.

language:
.if project.use_cxx
- cpp
.else
- c
.endif

cache:
- ccache

os:
- linux

.if defined (project.travis_recursive_dependencies) & project.travis_recursive_dependencies ?= "true"
#Sudo is need because we need to be able to install package for the depencies using apt-get
sudo: required
.endif

# The default distro for env:/matrix:/* and unspecified-dist matrix:/* tests;
# for the latter see also addons/apt/sources with the package repos in use.
# See https://docs.travis-ci.com/user/reference/overview/ for up-to-date
# allowed values of "dist" supported by the Travis CI service.
.# Note: by default zproject before 2019-05-22 enforced xenial
.# in specific build items in the matrix: below, and nothing here
.if defined(project.travis_dist)
.   if project.travis_dist ?= ""
#dist:
#- xenial
.   else
dist:
- $(project.travis_dist)
.   endif
.else
dist:
- xenial
.endif
.#
.if !defined(project.travis_dist) | (project.travis_dist ?= "")
.   if project.travis_use_pkg_deps_prereqs_source ?= 1
.# Even if our zproject user did not want a distro specified,
.# we need something specific installed in the build env
.       project.travis_dist = "xenial"
.   else
.# Have it defined() at least
.       project.travis_dist = ""
.   endif
.endif
.#
.# TODO: Add the older "precise"/"ubuntu12" back for completness?
.pkg_src_zeromq_dist = ""
.if (project.travis_dist ?= "trusty")
.    pkg_src_zeromq_dist = "pkg_src_zeromq_ubuntu14"
.elsif (project.travis_dist ?= "xenial")
.    pkg_src_zeromq_dist = "pkg_src_zeromq_ubuntu16"
.endif

#services:
#- docker

# Set CI_TIME=true to enable build-step profiling in Travis
# Set CI_TRACE=true to enable shell script tracing in Travis
# Set CI_CONFIG_QUIET=true to enable "configure --quiet" (only report stderr)
# Set CI_REQUIRE_GOOD_GITIGNORE=false to NOT fail if "git status -s" is not clean
# Set CI_REQUIRE_GOOD_CLANG_FORMAT=true to fail if "clang-format" check is not clean
env:
  global:
    - CI_TIME=false
    - CI_TRACE=false
    - CI_CONFIG_QUIET=true
    - CI_REQUIRE_GOOD_GITIGNORE=\
.if project.travis_require_gitignore ?= 1
true
.else
false
.endif
    - CI_REQUIRE_GOOD_CLANG_FORMAT=\
.if defined(project.travis_clangformat_require_good)
.   echo "TRAVIS: CLANG-FORMAT: require-good: " + project.travis_clangformat_require_good
.   if project.travis_clangformat_require_good ?= 1
true
.   else
false
.   endif
.else
.   if project.travis_clangformat_allow_failures ?= 1
.   echo "TRAVIS: CLANG-FORMAT: require-good: " + 1 + " (default from allow_failed)"
true
.   else
.   echo "TRAVIS: CLANG-FORMAT: require-good: " + 0 + " (default from allow_failed)"
false
.   endif
.endif
    - CI_TEST_DISTCHECK=\
.if !defined(project.travis_distcheck) | project.travis_distcheck ?= 1
.# 1 = required, is default if nothing is set
true
.else
.# 0 = skip, 2 = allowed fail (in a special test case, skip in others)
false
.endif
    # tokens to deploy releases on OBS.
    # 1) Create 2 OBS tokens with osc token --create network:messaging:zeromq:release-<stable|draft> <project>
    #    encrypt them with travis encrypt --org -r <org>/<repo> OBS_<STABLE|DRAFT>_TOKEN="<token>"
    # 2) Uncomment the three "secure" lines and paste the three generated hashed
    #    strings, which include each token's name, as parameters
    #- secure:
    #- secure:
    #- secure:
  matrix:
    - BUILD_TYPE=default
    - BUILD_TYPE=default-Werror
.if project.travis_distcheck ?= 2
    - BUILD_TYPE=default CI_TEST_DISTCHECK=true
.endif
.if project.travis_use_cmake ?= 0
### Note: we don't use CMake
#\
.endif
    - BUILD_TYPE=cmake
#   - BUILD_TYPE=android
#   - BUILD_TYPE=check-py

# Prerequisite packages provided by OS distro and used "as is"
pkg_deps_prereqs_distro: &pkg_deps_prereqs_distro
.      for use
.       if ! defined (use.repository) & ! defined (use.tarball)
.         if defined (use.debian_name)
.             if !(use.debian_name = '')
    - $(use.debian_name)
.             else
.                 echo "WARNING: debian_name=='' for $(use.project) - not added to .travis.yml"
.             endif
.         elsif defined (use.libname)
    - $(string.replace (use.libname, "_|-"):lower)-dev
.         else
    - $(string.replace (use.project, "_|-"))-dev
.         endif
.       endif
.      endfor

# Prerequisite packages that may be built from source or used from
# prebuilt packages of that source (usually not from an OS distro)
pkg_deps_prereqs_source: &pkg_deps_prereqs_source
.      for use
.       if defined (use.repository) | defined (use.tarball)
.         if defined (use.debian_name)
.             if !(use.debian_name = '')
    - $(use.debian_name)
.             else
.                 echo "WARNING: debian_name=='' for $(use.project) - not added to .travis.yml"
.             endif
.         elsif defined (use.libname)
    - $(string.replace (use.libname, "_|-"):lower)-dev
.         else
    - $(string.replace (use.project, "_|-"))-dev
.         endif
.       endif
.      endfor

.if project.travis_use_pkg_deps_prereqs_source ?= 0
# NOTE: Our forks are checked out and built without pkg dependencies in use
.endif
pkg_deps_prereqs: &pkg_deps_prereqs
.if project.travis_use_pkg_deps_prereqs_source ?= 0
#\
.endif
    - *pkg_deps_prereqs_source
    - *pkg_deps_prereqs_distro

.if defined(project.travis_check_zproject) & !(project.travis_check_zproject ?= 0)
# NOTE: Currently the shell script does support use of packages or checkout
# of latest github code for these tools - but only from zeromq org repos,
# no forks/branches.
pkg_deps_zproject: &pkg_deps_zproject
    - generator-scripting-language
    - zproject

.endif
pkg_deps_doctools: &pkg_deps_doctools
    - asciidoc
    - xmlto

pkg_deps_devtools: &pkg_deps_devtools
    - git

# NOTE: Unlike earlier zproject versions, the pkg_src* objects below do not
# start with a dash, due to peculiarities of YAML alias dereferencing in Travis

# dist==trusty means ubuntu14
pkg_src_zeromq_ubuntu14: &pkg_src_zeromq_ubuntu14
  sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/Release.key'

# dist==xenial means ubuntu16
pkg_src_zeromq_ubuntu16: &pkg_src_zeromq_ubuntu16
  sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_16.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_16.04/Release.key'

pkg_deps_common: &pkg_deps_common
- *pkg_deps_devtools
- *pkg_deps_prereqs

# Also note that as of early 2017, either dist==trusty or services==docker
# is needed for some C++11 support; docker envs are usually faster to start up
# A newer dist==xenial completes the C++11 support with gcc-5+
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
# Note that with current implementation of zproject use-cxx-gcc-4-9 option,
# this effectively hardcodes the use of specifically 4.9, not allowing for
# "4.9 or newer".
.endif
addons:
  apt:
.if (pkg_src_zeromq_dist ?<> "") | (defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0))
    sources:
.endif
.if (pkg_src_zeromq_dist ?<> "")
    - *$(pkg_src_zeromq_dist)
.endif
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
    - ubuntu-toolchain-r-test
.endif
    packages:
    - *pkg_deps_common
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
    - gcc-4.9
    - g++-4.9
.endif

matrix:
  include:
  - env: BUILD_TYPE=default-with-docs
    os: linux
.if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.endif
    addons:
      apt:
.if (pkg_src_zeromq_dist ?<> "") | (defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0))
        sources:
.endif
.if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.endif
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
        - ubuntu-toolchain-r-test
.endif
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
        - gcc-4.9
        - g++-4.9
.endif
  - env: BUILD_TYPE=valgrind
    os: linux
.if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.endif
    addons:
      apt:
.if (pkg_src_zeromq_dist ?<> "") | (defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0))
        sources:
.endif
.if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.endif
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
        - ubuntu-toolchain-r-test
.endif
        packages:
        - valgrind
        - *pkg_deps_common
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
        - gcc-4.9
        - g++-4.9
.endif
  - env: BUILD_TYPE=default ADDRESS_SANITIZER=enabled
    os: linux
.if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.endif
    addons:
      apt:
.if (pkg_src_zeromq_dist ?<> "") | (defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0))
        sources:
.endif
.if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.endif
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
        - ubuntu-toolchain-r-test
.endif
        packages:
        - *pkg_deps_common
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
        - gcc-4.9
        - g++-4.9
.endif
.if defined(project.travis_check_zproject) & !(project.travis_check_zproject ?= 0)
  - env: BUILD_TYPE=check_zproject
    os: linux
.   if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.   endif
    addons:
      apt:
.   if (pkg_src_zeromq_dist ?<> "")
        sources:
        - *$(pkg_src_zeromq_dist)
.   endif
        packages:
        - *pkg_deps_devtools
        - *pkg_deps_zproject
.endif
.if (defined (project.travis_shadow_clang) & !(project.travis_shadow_clang ?= 0)) | (defined (project.travis_shadow_gcc) & !(project.travis_shadow_gcc ?= 0))
# Shadow-compilation setups below inspired by https://docs.travis-ci.com/user/languages/cpp/
.endif
.   if defined (project.travis_shadow_clang) & !(project.travis_shadow_clang ?= 0)
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0 && export CC CXX"
    os: linux
.       if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.       else
    dist: xenial
.       endif
    addons:
      apt:
        sources:
.       if (project.travis_dist ?<> "")
        - llvm-toolchain-$(project.travis_dist)-5.0
.       else
        - llvm-toolchain-xenial-5.0
.       endif
.       if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.       endif
        packages:
        - *pkg_deps_common
        - clang-5.0
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && export CC CXX"
    os: linux
.       if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.       else
    dist: xenial
.       endif
    addons:
      apt:
        sources:
.       if (project.travis_dist ?<> "")
        - llvm-toolchain-$(project.travis_dist)-4.0
.       else
        - llvm-toolchain-xenial-4.0
.       endif
.       if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.       endif
        packages:
        - *pkg_deps_common
        - clang-4.0
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-3.9 && CXX=clang++-3.9 && export CC CXX"
    os: linux
.       if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.       else
    dist: xenial
.       endif
    addons:
      apt:
        sources:
.       if (project.travis_dist ?<> "")
        - llvm-toolchain-$(project.travis_dist)-3.9
.       else
        - llvm-toolchain-xenial-3.9
.       endif
.       if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.       endif
        packages:
        - *pkg_deps_common
        - clang-3.9
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-3.8 && CXX=clang++-3.8 && export CC CXX"
    os: linux
.       if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.       else
    dist: xenial
.       endif
    addons:
      apt:
        sources:
.       if (project.travis_dist ?<> "")
        - llvm-toolchain-$(project.travis_dist)-3.8
.       else
        - llvm-toolchain-xenial-3.8
.       endif
.       if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.       endif
        packages:
        - *pkg_deps_common
        - clang-3.8
.endif
.if defined (project.travis_shadow_gcc) & !(project.travis_shadow_gcc ?= 0)
.   if !(defined(use_cxx_gcc_4_9)) | !(use_cxx_gcc_4_9 ?= 1)
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9 && export CC CXX"
    os: linux
.       if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.       endif
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
.       if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.       endif
        packages:
        - *pkg_deps_common
        - g++-4.9
        - gcc-4.9
.   endif
.   if !defined(project.travis_dist) | (project.travis_dist ?<> "xenial")
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && export CC CXX"
    os: linux
.       if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.       endif
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
.       if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.       endif
        packages:
        - *pkg_deps_common
        - g++-5
        - gcc-5
.   endif
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-6 && CXX=g++-6 && export CC CXX"
    os: linux
.   if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.   endif
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
.   if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.   endif
        packages:
        - *pkg_deps_common
        - g++-6
        - gcc-6
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && export CC CXX"
    os: linux
.   if (project.travis_dist ?<> "")
    dist: $(project.travis_dist)
.   endif
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
.   if (pkg_src_zeromq_dist ?<> "")
        - *$(pkg_src_zeromq_dist)
.   endif
        packages:
        - *pkg_deps_common
        - g++-7
        - gcc-7
.endif
.if project.travis_clangformat_implem ?= "autotools" | ( !defined(project.travis_clangformat_implem) & project.travis_use_cmake ?= 0 )
.   echo "TRAVIS: CLANG-FORMAT: implementation: autotools"
### Note: we don't use CMake
#\
.endif
  - env: BUILD_TYPE=cmake DO_CLANG_FORMAT_CHECK=1 CLANG_FORMAT=clang-format-5.0
# For non-cmake users, there is an autotools solution with a bit more overhead
# to have dependencies ready and pass configure script before making this check).
# Note that the autotools variant will also require dependencies preinstalled to
# pass its configure script:
.if project.travis_clangformat_implem ?= "cmake" | ( !defined(project.travis_clangformat_implem) & ( project.travis_use_cmake ?= 1 | !defined(project.travis_use_cmake) ) )
.   echo "TRAVIS: CLANG-FORMAT: implementation: cmake"
#\
.endif
  - env: BUILD_TYPE=clang-format-check CLANG_FORMAT=clang-format-5.0
    os: linux
    dist: xenial
    addons:
      apt:
        sources:
        - llvm-toolchain-xenial-5.0
        packages:
        - clang-5.0
        - clang-format-5.0
.if project.travis_clangformat_implem ?= "cmake" | ( !defined(project.travis_clangformat_implem) & ( project.travis_use_cmake ?= 1 | !defined(project.travis_use_cmake) ) )
#autotools#\
.endif
        - *pkg_deps_prereqs
.if project.travis_clangformat_allow_failures ?= 1 | project.travis_distcheck ?= 2 | project.travis_shadow_gcc ?=2 | project.travis_shadow_clang ?= 2
# Note: "env" lines below must exactly describe a matrix option defined above
  allow_failures:
.   if project.travis_distcheck ?= 2
.   echo "TRAVIS: DISTCHECK: allow-fail: true"
  - env: BUILD_TYPE=default CI_TEST_DISTCHECK=true
.   endif
.   if project.travis_check_zproject ?= 2
.   echo "TRAVIS: CHECK_ZPROJECT: allow-fail: true"
  - env: BUILD_TYPE=check_zproject
.   endif
.   if project.travis_shadow_gcc ?= 2
.   echo "TRAVIS: Shadow GCC versions: allow-fail: true"
.       if !(use_cxx_gcc_4_9 ?= 1)
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9 && export CC CXX"
.       endif
.       if !defined(project.travis_dist) | (project.travis_dist ?<> "xenial")
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && export CC CXX"
.       endif
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-6 && CXX=g++-6 && export CC CXX"
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && export CC CXX"
.   endif
.   if project.travis_shadow_clang ?= 2
.   echo "TRAVIS: Shadow CLANG versions: allow-fail: true"
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0 && export CC CXX"
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && export CC CXX"
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-3.9 && CXX=clang++-3.9 && export CC CXX"
  - env: BUILD_TYPE=default-Werror MATRIX_EVAL="CC=clang-3.8 && CXX=clang++-3.8 && export CC CXX"
.   endif
.   if project.travis_clangformat_allow_failures ?= 1
.   echo "TRAVIS: CLANG-FORMAT: allow-fail: true"
.       if project.travis_clangformat_implem ?= "autotools" | ( !defined(project.travis_clangformat_implem) & project.travis_use_cmake ?= 0 )
#\
.       endif
  - env: BUILD_TYPE=cmake DO_CLANG_FORMAT_CHECK=1 CLANG_FORMAT=clang-format-5.0
.       if project.travis_clangformat_implem ?= "cmake" | ( !defined(project.travis_clangformat_implem) & ( project.travis_use_cmake ?= 1 | !defined(project.travis_use_cmake) ) )
#\
.       endif
  - env: BUILD_TYPE=clang-format-check CLANG_FORMAT=clang-format-5.0
.   endif
.endif
.if project.travis_check_abi_compliance ?= 1
.   if project.exports_classes
# Note: the ABI compliance checker script currently assumes that:
# 1) Your project sources have a "latest_release" branch or tag
#    to check out and compare the current commit's ABI to;
# 2) Prerequisites are available as packages - no custom rebuilds.
  - env: BUILD_TYPE=abi-compliance-checker
    os: linux
    dist: xenial
    addons:
      apt:
        sources:
        - sourceline: 'deb http://ppa.launchpad.net/hnakamur/universal-ctags/ubuntu bionic main'
          key_url: 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x60D954A11017341E'
        packages:
        - *pkg_deps_common
        - universal-ctags
        - abi-dumper
        - abi-compliance-checker
.   endif
.endif

before_install:
- if [ "$TRAVIS_OS_NAME" == "osx" -a "$BUILD_TYPE" == "android" ] ; then brew install binutils ; fi
- if [ "$TRAVIS_OS_NAME" == "osx" -a "$BUILD_TYPE" == "valgrind" ] ; then brew install valgrind ; fi
.if defined(use_cxx) & defined(use_cxx_gcc_4_9) & !(use_cxx ?= 0) & !(use_cxx_gcc_4_9 ?= 0)
- if [ "$CXX" == "g++" ] ; then export CXX="g++-4.9" CC="gcc-4.9" ; fi
.endif
- if [ -n "\${MATRIX_EVAL}" ] ; then eval \${MATRIX_EVAL} ; fi

# Hand off to generated script for each BUILD_TYPE
script: ./ci_build.sh
before_deploy: . ./ci_deploy.sh && ./ci_deploy_obs.sh
deploy:
  provider: releases
  api_key:
    # To encrypt your access token run: `travis encrypt -r user/repo`
    secure: <encrypted github access token>
  file_glob: true
  file: ${$(PROJECT.NAME:c)_DEPLOYMENT}
  skip_cleanup: true
  on:
    branch: master
    tags: true
    condition: $TRAVIS_OS_NAME =~ (linux) && $BUILD_TYPE =~ (default)
.   close
.else
.   echo "NOT regenerating an existing .travis.yml file; you might want to move yours out of the way and re-generate the project again to get updated settings"
.endif
.
. if project.travis_recursive_dependencies ?= "true"
.output "ci_dependencies.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

REQUESTED_BRANCH=$1

set -e

if [ -z "$DEPENDENCIES_DIR" ]; then
    export DEPENDENCIES_DIR="`pwd`/tmp-deps"
fi
mkdir -p "$DEPENDENCIES_DIR"
cd "$DEPENDENCIES_DIR"

# Clone and build dependencies, if not yet installed to Travis env as DEBs
# or MacOS packages; other OSes are not currently supported by Travis cloud
echo "`date`: Starting build of dependencies (if any) using ci_dependencies.sh $REQUESTED_BRANCH..."
.for use

# Start of recipe for dependency: $(use.project)
fold_start dependency.$(use.project) "Install dependency $(use.project)"
if \
.      if defined (use.debian_name)
.        if !(use.debian_name = '')
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.debian_name) >/dev/null 2>&1) || \\
.        endif
.   elsif defined (use.libname)
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.libname)-dev >/dev/null 2>&1) || \\
.   else
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.project)-dev >/dev/null 2>&1) || \\
.   endif
       (command -v brew >/dev/null 2>&1 && brew ls --versions $(use.project) >/dev/null 2>&1) || \\
       ([ -e "$(use.project)" ]) \\
; then
.if ! defined (use.repository) & ! defined (use.tarball)
.         if defined (use.debian_name)
.             if !(use.debian_name = '')
 echo "INFO: Get '$(use.project)' using apt-get $(use.debian_name)" >&2
 sudo apt-get install $(use.debian_name) -y || exit \$?
.             endif
.         elsif defined (use.libname)
 echo "INFO: Get '$(use.project)' using apt-get $(string.replace (use.libname, "_|-"):lower)-dev" >&2
 sudo apt-get install $(string.replace (use.libname, "_|-"):lower)-dev -y || exit \$?
.         else
 echo "INFO: Get '$(use.project)' using apt-get $(string.replace (use.project, "_|-"))-dev" >&2
 sudo apt-get install $(string.replace (use.project, "_|-"))-dev -y || exit \$?
.         endif
.else

.   if defined (use.repository)
.       if defined (use.release)
    FOLDER_NAME="$(use.project)-$(use.release)"
.       else
    FOLDER_NAME="$(use.project)"
.       endif
.   endif

.   if defined (use.repository)
if [ -d "$FOLDER_NAME" ]; then
    echo "$FOLDER_NAME already exist. Skipped." >&2
else
.   endif
    echo ""
.    if ! defined (use.repository) & ! defined (use.tarball)
    echo "WARNING: Can not build prerequisite '$(use.project)'" >&2
    echo "because neither tarball nor repository sources are known for it," >&2
    echo "and it was not installed as a package; this may cause the test to fail!" >&2
.    else
    BASE_PWD=${PWD}
.        if defined (use.tarball)
    echo "`date`: INFO: Building prerequisite '$(use.project)' from tarball..." >&2
    $CI_TIME wget $(use.tarball)
    tar -xzf \$(basename "$(use.tarball)")
    cd \$(basename "$(use.tarball)" .tar.gz) || exit \$?
.        elsif defined (use.repository)
    echo "`date`: INFO: Building prerequisite '$(use.project)' from Git repository..." >&2
.            if defined (use.release)
    echo "git clone -b $(use.release:) $(use.repository) $FOLDER_NAME"
    $CI_TIME git clone --quiet --depth 1 -b $(use.release:) $(use.repository) $FOLDER_NAME
.            else
    if [ "x$REQUESTED_BRANCH" = "x" ]; then
        echo "git clone $(use.repository) $FOLDER_NAME"
        $CI_TIME git clone --quiet --depth 1 $(use.repository) $FOLDER_NAME
    else
        if git ls-remote --heads $(use.repository) | grep -q "$REQUESTED_BRANCH"; then
            echo "git clone -b "$REQUESTED_BRANCH" $(use.repository) $FOLDER_NAME"
            $CI_TIME git clone --quiet --depth 1 -b "$REQUESTED_BRANCH" $(use.repository) $FOLDER_NAME
        else
            echo "$REQUESTED_BRANCH not found for $(use.repository)"
            echo "git clone $(use.repository) $FOLDER_NAME"
            $CI_TIME git clone --quiet --depth 1 $(use.repository) $FOLDER_NAME
        fi
    fi
.            endif
    echo "Entering in ${PWD}/${FOLDER_NAME}"
    cd "./${FOLDER_NAME}"
.        endif
.        if defined (use.builddir)
    cd ./$(use.builddir)
.        endif
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
.        if defined (use.repository) & ! defined (use.tarball)
        git --no-pager log --oneline -n1
.        endif
    if [ -e ci_dependencies.sh ]; then
        PROPAGATED_BRANCH="`git branch | grep \* | cut -d ' ' -f2`"
        DEFAULT_BRANCH="`git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`"
        if [ "x$REQUESTED_BRANCH" = "x" ]; then
            echo "`date`: INFO: Building prerequisites of '$(use.project)' using ci_dependencies.sh the default branch..." >&2
            ($CI_TIME source ./ci_dependencies.sh)
        elif [ "x$PROPAGATED_BRANCH" = "x$DEFAULT_BRANCH" ]; then
            echo "`date`: INFO: Building prerequisites of '$(use.project)' using ci_dependencies.sh the default branch..." >&2
            ($CI_TIME source ./ci_dependencies.sh)
        else
            echo "`date`: INFO: Building prerequisites of '$(use.project)' using ci_dependencies.sh $PROPAGATED_BRANCH branch..." >&2
            ($CI_TIME source ./ci_dependencies.sh $PROPAGATED_BRANCH)
        fi
    fi
    if [ -e autogen.sh ]; then
        $CI_TIME ./autogen.sh 2> /dev/null
    fi
    if [ -e buildconf ]; then
        $CI_TIME ./buildconf 2> /dev/null
    fi
    if [ ! -e autogen.sh ] && [ ! -e buildconf ] && [ ! -e ./configure ] && [ -s ./configure.ac ]; then
        $CI_TIME libtoolize --copy --force && \\
        $CI_TIME aclocal -I . && \\
        $CI_TIME autoheader && \\
        $CI_TIME automake --add-missing --copy && \\
        $CI_TIME autoconf || \\
        $CI_TIME autoreconf -fiv
    fi
.        if count(use.add_config_opts) > 0
    ( # Custom additional options for $(use.project)
.            for use.add_config_opts as add_cfgopt
        CONFIG_OPTS+=("$(add_cfgopt)")
.            endfor
        $CI_TIME ./configure "${CONFIG_OPTS[@]}"
    )
.        else
    $CI_TIME ./configure "${CONFIG_OPTS[@]}"
.        endif
    $CI_TIME make -j4
    $CI_TIME make install
    echo "Leaving from ${PWD}"
    cd "${BASE_PWD}"
    echo "Now in ${PWD}"
.        if use.optional
    CONFIG_OPTS+=("--with-$(use.libname)=yes")
.        endif
.    endif
. if defined (use.repository)
fi
. endif
.    if use.optional
else
    CONFIG_OPTS+=("--with-$(use.libname)=yes")
.    endif
.endif
fi
fold_end dependency.$(use.project)

.endfor

.close
.chmod_x ("ci_dependencies.sh")
.output ".ci_global_release"
. if defined (project.travis_global_release)
$(project.travis_global_release:)
. endif
.close
.endif
.output "ci_build.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

set -e

# Set this to enable verbose profiling
[ -n "${CI_TIME-}" ] || CI_TIME=""
case "$CI_TIME" in
    [Yy][Ee][Ss]|[Oo][Nn]|[Tt][Rr][Uu][Ee])
        CI_TIME="time -p " ;;
    [Nn][Oo]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee])
        CI_TIME="" ;;
esac

configure_tracing() {
	# Set this to enable verbose tracing
	[ -n "${CI_TRACE-}" ] || CI_TRACE="no"
	case "$CI_TRACE" in
		[Nn][Oo]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee])
			set +x ;;
		[Yy][Ee][Ss]|[Oo][Nn]|[Tt][Rr][Uu][Ee])
			set -x ;;
	esac
}
configure_tracing

fold_start() {
  set +x
  echo -e "travis_fold:start:$1\\033[33;1m$2\\033[0m"
  configure_tracing
}

fold_start_plain() {
  set +x
  echo -e "travis_fold:start:$1"
  configure_tracing
}

fold_end() {
  set +x
  echo -e "\\ntravis_fold:end:$1\\r"
  configure_tracing
}

case $TRAVIS_OS_NAME in
windows)
    export
    choco install openjdk
    export JAVA_HOME="C:\\Program Files\\OpenJDK\\jdk-13.0.2"
    export BUILD_PREFIX=$TEMP/ci_build
    # Build will fail if processes are still running at the end of the script.
    # Gradle by default starts a daemon so consequtive builds are faster.
    # Therefore instruct gradle not to use its daemon.
    export GRADLE_OPTS=-Dorg.gradle.daemon=false

    cd ..

.for project.use where !optional & defined (use.repository)
.   if defined (use.release)
    git clone --quiet --depth 1 -b $(use.release:) $(use.repository) $(use.project)
.   else
    git clone --quiet --depth 1 $(use.repository) $(use.project)
.   endif
    cd $(use.project)
    mkdir build
    cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$BUILD_PREFIX -DCMAKE_PREFIX_PATH=$BUILD_PREFIX
    cmake --build . --config Release --target install
    cd ../..

    if [ -d "$(use.project)/bindings/jni" ]; then
        cd $(use.project)/bindings/jni
        ./gradlew publishToMavenLocal -PbuildPrefix=$BUILD_PREFIX --info
        cd ../../..
    fi

.endfor
    cd $(project.name)
    mkdir build
    cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$BUILD_PREFIX -DCMAKE_PREFIX_PATH=$BUILD_PREFIX
    cmake --build . --config Release --target install
    ctest --build-config Release
    cd ../..

    cd $(project.name)
    cd bindings/jni
    ./gradlew build jar -PbuildPrefix=$BUILD_PREFIX -x test --info
    ./gradlew publishToMavenLocal -PbuildPrefix=$BUILD_PREFIX --info

    exit 0
esac

case "$BUILD_TYPE" in
default|default-Werror|default-with-docs|valgrind|clang-format-check)
    LANG=C
    LC_ALL=C
    export LANG LC_ALL

    if [ -d "./tmp" ]; then
        # Proto installation area for this project and its deps
        rm -rf ./tmp
    fi
    mkdir -p tmp
. if !defined (project.travis_recursive_dependencies) | ! (project.travis_recursive_dependencies ?= "true")
    if [ -d "./tmp-deps" ]; then
        # Checkout/unpack and build area for dependencies
        rm -rf ./tmp-deps
    fi
    mkdir -p tmp-deps
.endif
    BUILD_PREFIX=$PWD/tmp

    PATH="`echo "$PATH" | sed -e 's,^/usr/lib/ccache/?:,,' -e 's,:/usr/lib/ccache/?:,,' -e 's,:/usr/lib/ccache/?$,,' -e 's,^/usr/lib/ccache/?$,,'`"
    CCACHE_PATH="$PATH"
    CCACHE_DIR="${HOME}/.ccache"
    # Use tools from prerequisites we might have built
    PATH="${BUILD_PREFIX}/sbin:${BUILD_PREFIX}/bin:${PATH}"
    export CCACHE_PATH CCACHE_DIR PATH
    HAVE_CCACHE=no
    if which ccache && ls -la /usr/lib/ccache ; then
        HAVE_CCACHE=yes
    fi
    mkdir -p "${CCACHE_DIR}" || HAVE_CCACHE=no

    if [ "$HAVE_CCACHE" = yes ] && [ -d "$CCACHE_DIR" ]; then
        fold_start_plain ccache.before
        echo "CCache stats before build:"
        ccache -s || true
        fold_end ccache.before
    fi

    CONFIG_OPTS=()
    COMMON_CFLAGS=""
    EXTRA_CFLAGS=""
    EXTRA_CPPFLAGS=""
    EXTRA_CXXFLAGS=""

    is_gnucc() {
        if [ -n "$1" ] && "$1" --version 2>&1 | grep 'Free Software Foundation' > /dev/null ; then true ; else false ; fi
    }

    COMPILER_FAMILY=""
    if [ -n "$CC" -a -n "$CXX" ]; then
        if is_gnucc "$CC" && is_gnucc "$CXX" ; then
            COMPILER_FAMILY="GCC"
            export CC CXX
        fi
    else
        if is_gnucc "gcc" && is_gnucc "g++" ; then
            # Autoconf would pick this by default
            COMPILER_FAMILY="GCC"
            [ -n "$CC" ] || CC=gcc
            [ -n "$CXX" ] || CXX=g++
            export CC CXX
        elif is_gnucc "cc" && is_gnucc "c++" ; then
            COMPILER_FAMILY="GCC"
            [ -n "$CC" ] || CC=cc
            [ -n "$CXX" ] || CXX=c++
            export CC CXX
        fi
    fi

    if [ -n "$CPP" ] ; then
        [ -x "$CPP" ] && export CPP
    else
        if is_gnucc "cpp" ; then
            CPP=cpp && export CPP
        fi
    fi

    CONFIG_OPT_WERROR="--enable-Werror=no"
    if [ "$BUILD_TYPE" == "default-Werror" ] ; then
        case "${COMPILER_FAMILY}" in
            GCC)
                echo "NOTE: Enabling ${COMPILER_FAMILY} compiler pedantic error-checking flags for BUILD_TYPE='$BUILD_TYPE'" >&2
                CONFIG_OPT_WERROR="--enable-Werror=yes"
                CONFIG_OPTS+=("--enable-Werror=yes")
                ;;
            *)
                echo "WARNING: Current compiler is not GCC, might not enable pedantic error-checking flags for BUILD_TYPE='$BUILD_TYPE'" >&2
                CONFIG_OPT_WERROR="--enable-Werror=auto"
                ;;
        esac
    fi

    CONFIG_OPTS+=("CFLAGS=-I${BUILD_PREFIX}/include")
    CONFIG_OPTS+=("CPPFLAGS=-I${BUILD_PREFIX}/include")
    CONFIG_OPTS+=("CXXFLAGS=-I${BUILD_PREFIX}/include")
    CONFIG_OPTS+=("LDFLAGS=-L${BUILD_PREFIX}/lib")
    CONFIG_OPTS+=("PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig")
    CONFIG_OPTS+=("--prefix=${BUILD_PREFIX}")
    if [ -z "${CI_CONFIG_QUIET-}" ] || [ "${CI_CONFIG_QUIET-}" = yes ] || [ "${CI_CONFIG_QUIET-}" = true ]; then
        CONFIG_OPTS+=("--quiet")
    fi

    if [ "$HAVE_CCACHE" = yes ] && [ "${COMPILER_FAMILY}" = GCC ]; then
        PATH="/usr/lib/ccache:$PATH"
        export PATH
        if [ -n "$CC" ] && [ -x "/usr/lib/ccache/`basename "$CC"`" ]; then
            case "$CC" in
                *ccache*) ;;
                */*) DIR_CC="`dirname "$CC"`" && [ -n "$DIR_CC" ] && DIR_CC="`cd "$DIR_CC" && pwd `" && [ -n "$DIR_CC" ] && [ -d "$DIR_CC" ] || DIR_CC=""
                    [ -z "$CCACHE_PATH" ] && CCACHE_PATH="$DIR_CC" || \\
                    if echo "$CCACHE_PATH" | egrep '(^'"$DIR_CC"':.*|^'"$DIR_CC"'$|:'"$DIR_CC"':|:'"$DIR_CC"'$)' ; then
                        CCACHE_PATH="$DIR_CC:$CCACHE_PATH"
                    fi
                    ;;
            esac
            CC="/usr/lib/ccache/`basename "$CC"`"
        else
            : # CC="ccache $CC"
        fi
        if [ -n "$CXX" ] && [ -x "/usr/lib/ccache/`basename "$CXX"`" ]; then
            case "$CXX" in
                *ccache*) ;;
                */*) DIR_CXX="`dirname "$CXX"`" && [ -n "$DIR_CXX" ] && DIR_CXX="`cd "$DIR_CXX" && pwd `" && [ -n "$DIR_CXX" ] && [ -d "$DIR_CXX" ] || DIR_CXX=""
                    [ -z "$CCACHE_PATH" ] && CCACHE_PATH="$DIR_CXX" || \\
                    if echo "$CCACHE_PATH" | egrep '(^'"$DIR_CXX"':.*|^'"$DIR_CXX"'$|:'"$DIR_CXX"':|:'"$DIR_CXX"'$)' ; then
                        CCACHE_PATH="$DIR_CXX:$CCACHE_PATH"
                    fi
                    ;;
            esac
            CXX="/usr/lib/ccache/`basename "$CXX"`"
        else
            : # CXX="ccache $CXX"
        fi
        if [ -n "$CPP" ] && [ -x "/usr/lib/ccache/`basename "$CPP"`" ]; then
            case "$CPP" in
                *ccache*) ;;
                */*) DIR_CPP="`dirname "$CPP"`" && [ -n "$DIR_CPP" ] && DIR_CPP="`cd "$DIR_CPP" && pwd `" && [ -n "$DIR_CPP" ] && [ -d "$DIR_CPP" ] || DIR_CPP=""
                    [ -z "$CCACHE_PATH" ] && CCACHE_PATH="$DIR_CPP" || \\
                    if echo "$CCACHE_PATH" | egrep '(^'"$DIR_CPP"':.*|^'"$DIR_CPP"'$|:'"$DIR_CPP"':|:'"$DIR_CPP"'$)' ; then
                        CCACHE_PATH="$DIR_CPP:$CCACHE_PATH"
                    fi
                    ;;
            esac
            CPP="/usr/lib/ccache/`basename "$CPP"`"
        else
            : # CPP="ccache $CPP"
        fi

        CONFIG_OPTS+=("CC=${CC}")
        CONFIG_OPTS+=("CXX=${CXX}")
        CONFIG_OPTS+=("CPP=${CPP}")
    fi

    CONFIG_OPTS_COMMON=$CONFIG_OPTS
    CONFIG_OPTS+=("--with-docs=no")

.if defined (project.travis_recursive_dependencies) & (project.travis_recursive_dependencies ?= "true")
    # Build dependencies, if needed
    export DEPENDENCIES_DIR="`pwd`/tmp-deps"
    GLOBAL_RELEASE="`head -n 1 .ci_global_release 2> /dev/null`"
    if [ "x$GLOBAL_RELEASE" = "x" ]; then
      PROPAGATED_BRANCH="$TRAVIS_BRANCH"
    else
      PROPAGATED_BRANCH="$GLOBAL_RELEASE"
    fi

    DEFAULT_BRANCH="`git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`"
    if [ "x$PROPAGATED_BRANCH" = "x$DEFAULT_BRANCH" ]; then
        [ -z "$CI_TIME" ] || echo "`date`: Starting build of dependencies (if any) using ./ci_dependencies.sh..."
        (source ./ci_dependencies.sh)
    else
        [ -z "$CI_TIME" ] || echo "`date`: Starting build of dependencies (if any) using ./ci_dependencies.sh $PROPAGATED_BRANCH branch..."
        (source ./ci_dependencies.sh $PROPAGATED_BRANCH)
    fi
.else
    # Clone and build dependencies, if not yet installed to Travis env as DEBs
    # or MacOS packages; other OSes are not currently supported by Travis cloud
    [ -z "$CI_TIME" ] || echo "`date`: Starting build of dependencies (if any)..."
.   for use
    # Start of recipe for dependency: $(use.project)
	fold_start dependency.$(use.project) "Install dependency $(use.project)"
    if \
.      if defined (use.debian_name)
.           if !(use.debian_name = '')
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.debian_name) >/dev/null 2>&1) || \\
.           endif
.      elsif defined (use.libname)
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.libname)-dev >/dev/null 2>&1) || \\
.      else
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.project)-dev >/dev/null 2>&1) || \\
.      endif
           (command -v brew >/dev/null 2>&1 && brew ls --versions $(use.project) >/dev/null 2>&1) \\
    ; then
        echo ""
.       if ! defined (use.repository) & ! defined (use.tarball)
        echo "WARNING: Can not build prerequisite '$(use.project)'" >&2
        echo "because neither tarball nor repository sources are known for it," >&2
        echo "and it was not installed as a package; this may cause the test to fail!" >&2
.       else
        BASE_PWD=${PWD}
.           if defined (use.tarball)
        echo "`date`: INFO: Building prerequisite '$(use.project)' from tarball..." >&2
        cd ./tmp-deps
        $CI_TIME wget $(use.tarball)
        tar -xzf \$(basename "$(use.tarball)")
        cd \$(basename "$(use.tarball)" .tar.gz) || exit \$?
.           elsif defined (use.repository)
        echo "`date`: INFO: Building prerequisite '$(use.project)' from Git repository..." >&2
        cd ./tmp-deps
.               if defined (use.release)
        $CI_TIME git clone --quiet --depth 1 -b $(use.release:) $(use.repository) $(use.project)
.               else
        $CI_TIME git clone --quiet --depth 1 $(use.repository) $(use.project)
.               endif
        cd ./$(use.project)
.           endif
.           if defined (use.builddir)
        cd ./$(use.builddir)
.           endif
        CCACHE_BASEDIR=${PWD}
        export CCACHE_BASEDIR
.           if defined (use.repository) & ! defined (use.tarball)
        git --no-pager log --oneline -n1
.           endif
        if [ -e autogen.sh ]; then
            $CI_TIME ./autogen.sh 2> /dev/null
        fi
        if [ -e buildconf ]; then
            $CI_TIME ./buildconf 2> /dev/null
        fi
        if [ ! -e autogen.sh ] && [ ! -e buildconf ] && [ ! -e ./configure ] && [ -s ./configure.ac ]; then
            $CI_TIME libtoolize --copy --force && \\
            $CI_TIME aclocal -I . && \\
            $CI_TIME autoheader && \\
            $CI_TIME automake --add-missing --copy && \\
            $CI_TIME autoconf || \\
            $CI_TIME autoreconf -fiv
        fi
.           if count(use.add_config_opts) > 0
        ( # Custom additional options for $(use.project)
.               for use.add_config_opts as add_cfgopt
            CONFIG_OPTS+=("$(add_cfgopt)")
.               endfor
            $CI_TIME ./configure "${CONFIG_OPTS[@]}"
        )
.           else
        $CI_TIME ./configure "${CONFIG_OPTS[@]}"
.           endif
        $CI_TIME make -j4
        $CI_TIME make install
        cd "${BASE_PWD}"
.           if use.optional
        CONFIG_OPTS+=("--with-$(use.libname)=yes")
.           endif
.       endif
.       if use.optional
    else
        CONFIG_OPTS+=("--with-$(use.libname)=yes")
.       endif
    fi
	fold_end dependency.$(use.project)

.   endfor
.endif

    # Build and check this project; note that zprojects always have an autogen.sh
	fold_start build.draft "Build and check this project with DRAFT APIs"
    echo ""
    echo "`date`: INFO: Starting build of currently tested project with DRAFT APIs..."
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
    if [ "$BUILD_TYPE" = "default-with-docs" ]; then
        CONFIG_OPTS=$CONFIG_OPTS_COMMON
        CONFIG_OPTS+=("--with-docs=yes")
    fi
    if [ -n "$ADDRESS_SANITIZER" ] && [ "$ADDRESS_SANITIZER" == "enabled" ]; then
        CONFIG_OPTS+=("--enable-address-sanitizer=yes")
    fi
    # Only use --enable-Werror on projects that are expected to have it
    # (and it is not our duty to check prerequisite projects anyway)
    CONFIG_OPTS+=("${CONFIG_OPT_WERROR}")
.   if count(add_config_opts) > 0
    # Custom additional options for this project
.       for add_config_opts as add_cfgopt
    CONFIG_OPTS+=("$(add_cfgopt)")
.       endfor
.   endif
    $CI_TIME ./autogen.sh 2> /dev/null
    $CI_TIME ./configure --enable-drafts=yes "${CONFIG_OPTS[@]}"
    case "$BUILD_TYPE" in
        valgrind)
            # Build and check this project
            $CI_TIME make VERBOSE=1 memcheck && exit
            echo "Re-running failed ($?) memcheck with greater verbosity" >&2
            $CI_TIME make VERBOSE=1 memcheck-verbose
            exit $?
            ;;
        clang-format-check)
            $CI_TIME make VERBOSE=1 clang-format-check-CI
            exit $?
            ;;
    esac
    $CI_TIME make VERBOSE=1 all

    echo "=== Are GitIgnores good after 'make all' with drafts?"
    make check-gitignore
    echo "==="

    if [ "$CI_TEST_DISTCHECK" = false ]; then
        make check
    else
    (
        export DISTCHECK_CONFIGURE_FLAGS="--enable-drafts=yes ${CONFIG_OPTS[@]}" && \\
        $CI_TIME make VERBOSE=1 DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS" distcheck || exit $?
    )
    fi

    echo "=== Are GitIgnores good after 'make (dist)check' with drafts?"
    make check-gitignore
    echo "==="
	fold_end build.draft

    # Build and check this project without DRAFT APIs
	fold_start build.stable "Build and check this project with STABLE APIs"
    echo ""
    echo "`date`: INFO: Starting build of currently tested project without DRAFT APIs..."
    make distclean

    git clean -f
    git reset --hard HEAD
    (
        $CI_TIME ./autogen.sh 2> /dev/null
        $CI_TIME ./configure --enable-drafts=no "${CONFIG_OPTS[@]}"
        $CI_TIME make VERBOSE=1 all || exit $?
        if [ "$CI_TEST_DISTCHECK" = false ]; then
            make check
        else
        (
            export DISTCHECK_CONFIGURE_FLAGS="--enable-drafts=no ${CONFIG_OPTS[@]}" && \\
            $CI_TIME make VERBOSE=1 DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS" distcheck || exit $?
        )
        fi
    ) || exit 1
    [ -z "$CI_TIME" ] || echo "`date`: Builds completed without fatal errors!"

    echo "=== Are GitIgnores good after 'make (dist)check' without drafts?"
    make check-gitignore
    echo "==="
	fold_end build.stable

    if [ "$HAVE_CCACHE" = yes ]; then
        fold_start_plain ccache.after
        echo "CCache stats after build:"
        ccache -s
        fold_end ccache.after
    fi
    ;;
bindings)
    pushd "./bindings/${BINDING}" && ./ci_build.sh
    ;;
*)
    pushd "./builds/${BUILD_TYPE}" && REPO_DIR="\$(dirs -l +1)" ./ci_build.sh
    ;;
esac
.close
.chmod_x ("ci_build.sh")
.directory.create ("builds/check_zproject")
.output "builds/check_zproject/ci_build.sh"
#!/usr/bin/env bash
set -ex

# NOTE: This script is not standalone, it is included from project root
# ci_build.sh script, which sets some envvars (like REPO_DIR below).
[ -n "${REPO_DIR-}" ] || exit 1

# Verify all required dependencies with repos can be checked out
# Note: certain zproject scripts that deal with deeper dependencies expect that
# such checkouts are directly in the same parent directory as "this" project.
cd "$REPO_DIR/.."
.for project.use where !optional & defined (use.repository) & !private
.   if defined (use.release)
git clone --quiet --depth 1 -b $(use.release:) $(use.repository) $(use.project)
.   else
git clone --quiet --depth 1 $(use.repository) $(use.project)
.   endif
.endfor
cd -

if ! ((command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list zproject >/dev/null 2>&1) || \\
       (command -v brew >/dev/null 2>&1 && brew ls --versions zproject >/dev/null 2>&1)); then
    cd "$REPO_DIR/.."
    git clone --quiet --depth 1 https://github.com/zeromq/zproject zproject
    cd zproject
    PATH="`pwd`:$PATH"
fi

if ! ((command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list generator-scripting-language >/dev/null 2>&1) || \\
       (command -v brew >/dev/null 2>&1 && brew ls --versions gsl >/dev/null 2>&1)); then
    cd "$REPO_DIR/.."
    git clone https://github.com/zeromq/gsl.git gsl
    cd gsl/src
    make
    PATH="`pwd`:$PATH"
fi
export PATH

# Verify that zproject template is up-to-date with files it can overwrite
# As we will overwrite this script file make sure bash loads the
# next lines into memory before executing
# http://stackoverflow.com/questions/21096478/overwrite-executing-bash-script-files
{
    cd "$REPO_DIR"
    gsl project.xml

    # keep an eye on git version used by CI
    git --version
    if [[ \$(git --no-pager diff -w) ]]; then
        git --no-pager diff -w
        echo "There are diffs between current code and code generated by zproject!"
        exit 1
    fi
    if [[ \$(git status -s) ]]; then
        git status -s
        echo "zproject generated new files!"
        exit 1
    fi
    exit 0
}
.close
.chmod_x ("builds/check_zproject/ci_build.sh")
.if count (model)
.directory.create ("builds/check_zproto")
.output "builds/check_zproto/ci_build.sh"
#!/usr/bin/env bash
set -ex

# NOTE: This script is not standalone, it is included from project root
# ci_build.sh script, which sets some envvars (like REPO_DIR below).
[ -n "${REPO_DIR-}" ] || exit 1

.for model
docker run -e GSL_BUILD_DIR=/code/src -v "$REPO_DIR":/code zeromqorg/zproto -zproject:1 -q $(name).xml
.endfor

# keep an eye on git version used by CI
git --version
if [[ \$(git --no-pager diff -w api/*) ]]; then
    git --no-pager diff -w api/*
    echo "There are diffs between current code and code generated by zproto!"
    exit 1
fi
if [[ \$(git status -s api) ]]; then
    git status -s api
    echo "zproto generated new files!"
    exit 1
fi
.close
.chmod_x ("builds/check_zproto/ci_build.sh")
.endif
.
.if project.travis_check_abi_compliance ?= 1
.   if project.exports_classes
.       directory.create ("builds/abi-compliance-checker")
.       output "builds/abi-compliance-checker/ci_build.sh"
#!/usr/bin/env bash
set -x

# Note: the ABI compliance checker script currently assumes that:
# 1) Your project sources have a "latest_release" branch or tag
#    to check out and compare the current commit's ABI to;
# 2) Prerequisites are available as packages - no custom rebuilds.

cd ../../

mkdir tmp
BUILD_PREFIX=$PWD/tmp

CONFIG_OPTS=()
CONFIG_OPTS+=("CFLAGS=-I${BUILD_PREFIX}/include -g -Og")
CONFIG_OPTS+=("CPPFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("CXXFLAGS=-I${BUILD_PREFIX}/include -g -Og")
CONFIG_OPTS+=("LDFLAGS=-L${BUILD_PREFIX}/lib")
CONFIG_OPTS+=("PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig")
CONFIG_OPTS+=("--prefix=${BUILD_PREFIX}")
CONFIG_OPTS+=("--enable-drafts=no")

function print_abi_api_breakages() {
   echo "ABI breakages detected:"
   cat compat_reports/$(project.libname)/${LATEST_VERSION}_to_HEAD/abi_affected.txt | c++filt
   echo "API breakages detected:"
   cat compat_reports/$(project.libname)/${LATEST_VERSION}_to_HEAD/src_affected.txt | c++filt
   exit 1
}

git fetch --unshallow
git fetch --all --tags
LATEST_VERSION=\$(git describe --abbrev=0 --tags)

\./autogen.sh
\./configure "${CONFIG_OPTS[@]}"
make VERBOSE=1 -j5
abi-dumper -public-headers include src/.libs/$(project.libname).so -o ${BUILD_PREFIX}/$(project.libname).head.dump -lver HEAD

git clone --depth 1 -b ${LATEST_VERSION} $(project.repository) latest_release
cd latest_release
\./autogen.sh
\./configure "${CONFIG_OPTS[@]}"
make VERBOSe=1 -j5
abi-dumper -public-headers include src/.libs/$(project.libname).so -o ${BUILD_PREFIX}/$(project.libname).latest.dump -lver ${LATEST_VERSION}

abi-compliance-checker -l $(project.libname) -d1 ${BUILD_PREFIX}/$(project.libname).latest.dump -d2 ${BUILD_PREFIX}/$(project.libname).head.dump -list-affected || print_abi_api_breakages
.       close
.       chmod_x ("builds/abi-compliance-checker/ci_build.sh")
.   endif
.endif
.
.output "ci_deploy.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

set -x
set -e

if [ "$BUILD_TYPE" == "default" ]; then
    # Tell travis to deploy all files in dist
    mkdir dist
    export $(PROJECT.NAME:c)_DEPLOYMENT=dist/*
    # Move archives to dist
    mv *.tar.gz dist
    mv *.zip dist
    # Generate hash sums
    cd dist
    md5sum *.zip *.tar.gz > MD5SUMS
    sha1sum *.zip *.tar.gz > SHA1SUMS
    cd -
elif [ "$BUILD_TYPE" == "bindings" ] && [ "$BINDING" == "jni" ] && [ -z "$BINDING_OPTS" ]; then
    ( cd bindings/jni && TERM=dumb ./gradlew clean bintrayUpload -PisRelease -PbuildPrefix=/tmp/jni_build )
elif [ "$BUILD_TYPE" == "bindings" ] && [ "$BINDING" == "jni" ] && [ "$BINDING_OPTS" == "android" ]; then
    export $(PROJECT.NAME:c)_DEPLOYMENT=bindings/jni/$(project.prefix)-jni/android/$(project.prefix)-android-*.jar
else
    export $(PROJECT.NAME:c)_DEPLOYMENT=""
fi
.close
.chmod_x ("ci_deploy.sh")
.
.output "ci_deploy_obs.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

# do NOT set -x or it will log the secret tokens!
set -e

if [ "$BUILD_TYPE" == "default" ] && [ -n "${OBS_STABLE_TOKEN}" -o -n "${OBS_DRAFT_TOKEN}" ]; then
    # Trigger source run on new tag on OBS. The latest tag will be fetched.
    if [ -n "${OBS_STABLE_TOKEN}" ]; then
        curl -H "Authorization: Token ${OBS_STABLE_TOKEN}" -X POST https://api.opensuse.org/trigger/runservice
    fi
    if [ -n "${OBS_DRAFT_TOKEN}" ]; then
        curl -H "Authorization: Token ${OBS_DRAFT_TOKEN}" -X POST https://api.opensuse.org/trigger/runservice
    fi
fi
.close
.chmod_x ("ci_deploy_obs.sh")
.endmacro
